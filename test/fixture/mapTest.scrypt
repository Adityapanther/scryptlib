
struct MapEntry {
    int key;
    int val;
    int keyIndex;
}


struct MapEntryBytes {
    bytes key;
    bytes val;
    int keyIndex;
}

struct MapEntryBool {
    int key;
    bool val;
    int keyIndex;
}


struct ST {
    int a;
    bool b;
    bytes[3] c;
}

struct MapEntrySt {
    ST key;
    int[3] val;
    int keyIndex;
}


contract MapTest {
    static const int MAX = 10;

    // @state
    bytes _mpData;

    public function unlock(int key, int val, int keyIndex)
     {

        HashedMap<int, int> map = new HashedMap(this._mpData);
        require(map.set(key, val, keyIndex));
        require(map.canGet(key, val, keyIndex));
        require(map.has(key, keyIndex));
        require(map.data() != b'');

        int s = map.size();
        loop (MAX) : i {
            if (i < s && i == keyIndex) {
                require(map.has(key, i));
            }
        }
        require(map.delete(key, keyIndex));
        require(!map.has(key, keyIndex));
        require(!map.canGet(key, val, keyIndex));

        require(map.set(key, val + 1, keyIndex));
        require(map.set(key, val + 2, keyIndex));
        require(map.has(key, keyIndex));
        require(!map.canGet(key, val + 1, keyIndex));
        require(map.canGet(key, val + 2, keyIndex));

        require(map.set(key + 3, val + 3, keyIndex));
        require(!map.has(key, keyIndex));
        require(map.has(key + 3, keyIndex));

        require(map.set(key + 2, val + 5, keyIndex + 1)); // not working as intuition bcoz of hased key orders
        require(map.set(key, val + 4, keyIndex + 2));
        require(map.size() == 3);
        require(map.delete(key + 2, keyIndex + 1));
        require(map.size() == 2);
        require(map.delete(key, keyIndex + 1));
        require(map.size() == 1);
        require(map.delete(key + 3, keyIndex));
        require(map.size() == 0);

        HashedMap<bytes, bool> map2 = new HashedMap(b'');
        require(map2.set(b'0102', true, keyIndex));
        require(map2.canGet(b'0102', true, keyIndex));
        require(true);
    }

    // test compiler/issues/384
    public function testIssue384(int x)
    {
        HashedMap<int, int> map = new HashedMap(this._mpData);
        require(map.set(9708714, 284112, 0));
        require(map.set(7989009, 9061514, 1));
    }

    public function testInsert(MapEntry[MAX] entries, bytes data)
     {

        HashedMap<int, int> map = new HashedMap(this._mpData);

        loop (MAX) : i {
            require(map.set(entries[i].key, entries[i].val, entries[i].keyIndex));
        }

        loop (MAX) : i {
            require(map.has(entries[i].key, entries[i].keyIndex));
        }

        require(map.size() == MAX);
        require(map.data() == data);

        require(map.delete(entries[5].key, entries[5].keyIndex));

        require(!map.has(entries[5].key, entries[5].keyIndex));

        require(map.size() == MAX -1);


        require(map.delete(entries[0].key, entries[0].keyIndex));

        require(!map.has(entries[0].key, entries[0].keyIndex));

        require(map.size() == MAX -2);
    }


    public function testInsertMiddle(int x)
     {

        HashedMap<int, int> map = new HashedMap(this._mpData);
        MapEntry[2] entries = [{118542, 2713441, 0}, {6816853, 870415, 1}];
        loop (2) : i {
            require(map.set(entries[i].key, entries[i].val, entries[i].keyIndex));
        }
        //InsertMiddle
        require(map.set(563862, 8317837, 1));
        require(map.has(563862, 1));
        require(map.size() == 3);
  
    }

    public function testInsertMapEntryBytes(MapEntryBytes[MAX] entries, bytes data)
    {

        HashedMap<bytes, bytes> map = new HashedMap(this._mpData);

        loop (MAX) : i {
            require(map.set(entries[i].key, entries[i].val, entries[i].keyIndex));
        }

        loop (MAX) : i {
            require(map.has(entries[i].key, entries[i].keyIndex));
        }

        require(map.size() == MAX);
        require(map.data() == data);

        require(map.delete(entries[5].key, entries[5].keyIndex));

        require(!map.has(entries[5].key, entries[5].keyIndex));

        require(map.size() == MAX -1);


        require(map.delete(entries[0].key, entries[0].keyIndex));

        require(!map.has(entries[0].key, entries[0].keyIndex));

        require(map.size() == MAX -2);
    }

    public function testInsertMapEntryBool(MapEntryBool[MAX] entries, bytes data)
    {

        HashedMap<int, bool> map = new HashedMap(this._mpData);

        loop (MAX) : i {
            require(map.set(entries[i].key, entries[i].val, entries[i].keyIndex));
        }

        loop (MAX) : i {
            require(map.has(entries[i].key, entries[i].keyIndex));
        }

        require(map.size() == MAX);
        require(map.data() == data);

        require(map.delete(entries[5].key, entries[5].keyIndex));

        require(!map.has(entries[5].key, entries[5].keyIndex));

        require(map.size() == MAX -1);


        require(map.delete(entries[0].key, entries[0].keyIndex));

        require(!map.has(entries[0].key, entries[0].keyIndex));

        require(map.size() == MAX -2);
    }

    public function testInsertMapEntrySt(MapEntrySt[MAX] entries, bytes data)
    {

        HashedMap<ST, int[3]> map = new HashedMap(this._mpData);

        loop (MAX) : i {
            MapEntrySt entry = entries[i];

            require(map.set(entry.key, entry.val, entries[i].keyIndex));
        }


        loop (MAX) : i {
            require(map.has(entries[i].key, entries[i].keyIndex));
        }

        require(map.size() == MAX);
        require(map.data() == data);
    }
}
